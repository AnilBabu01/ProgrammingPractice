// n=7

//* * * * * * * * * * * * * * * * * * * * * *
//* @ @ *     *     *     *     *     * @ @ *
//* @ @ *     *     *     *     *     * @ @ *
//* * * * * * * * * * * * * * * * * * * * * *
//*     * @ @ *     *     *     * @ @ *     *
//*     * @ @ *     *     *     * @ @ *     *
//* * * * * * * * * * * * * * * * * * * * * *
//*     *     * @ @ *     * @ @ *     *     *
//*     *     * @ @ *     * @ @ *     *     *
//* * * * * * * * * * * * * * * * * * * * * *
//*     *     *     * @ @ *     *     *     *
//*     *     *     * @ @ *     *     *     *
//* * * * * * * * * * * * * * * * * * * * * *
//*     *     * @ @ *     * @ @ *     *     *
//*     *     * @ @ *     * @ @ *     *     *
//* * * * * * * * * * * * * * * * * * * * * *
//*     * @ @ *     *     *     * @ @ *     *
//*     * @ @ *     *     *     * @ @ *     *
//* * * * * * * * * * * * * * * * * * * * * *
//* @ @ *     *     *     *     *     * @ @ *
//* @ @ *     *     *     *     *     * @ @ *
//* * * * * * * * * * * * * * * * * * * * * *



#include<bits/stdc++.h>
using namespace std;

int main()
{
	int n=8;
	int MAXPRINT=n*3+1; //10*3+1 ==31
    int m=MAXPRINT;
	for(int row=0;row<MAXPRINT;row++)
	{    m=m-1;
		for(int col=0;col<MAXPRINT;col++)
		{
			if(row%3==0 or col%3 == 0)
			{
				cout<<"* ";
			}

			else if(row==col or row+1 ==col || col+1==row ||MAXPRINT-row==col||MAXPRINT-row-1==col||MAXPRINT-row-2==col)
			{
				cout<<"@ ";
			}
			else
			cout<<"  ";
		}
		cout<<endl;
	}


}

//// Q-3
//
//10
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//  *                           * @ @ @ @ @ @ @ @ @ @ @ @ @ *
//    *                         * @ @ @ @ @ @ @ @ @ @ @ @ *
//      *                       * @ @ @ @ @ @ @ @ @ @ @ *
//        *                     * @ @ @ @ @ @ @ @ @ @ *
//          *                   * @ @ @ @ @ @ @ @ @ *
//            *                 * @ @ @ @ @ @ @ @ *
//              *               * @ @ @ @ @ @ @ *
//                *             * @ @ @ @ @ @ *
//                  *           * @ @ @ @ @ *
//                    *         * @ @ @ @ *
//                      *       * @ @ @ *
//                        *     * @ @ *
//                          *   * @ *
//                            * * *
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//                            * * *
//                          * @ *   *
//                        * @ @ *     *
//                      * @ @ @ *       *
//                    * @ @ @ @ *         *
//                  * @ @ @ @ @ *           *
//                * @ @ @ @ @ @ *             *
//              * @ @ @ @ @ @ @ *               *
//            * @ @ @ @ @ @ @ @ *                 *
//          * @ @ @ @ @ @ @ @ @ *                   *
//        * @ @ @ @ @ @ @ @ @ @ *                     *
//      * @ @ @ @ @ @ @ @ @ @ @ *                       *
//    * @ @ @ @ @ @ @ @ @ @ @ @ *                         *
//  * @ @ @ @ @ @ @ @ @ @ @ @ @ *                           *

